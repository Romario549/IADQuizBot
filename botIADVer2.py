import telebot
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton
import sqlite3
import random
import time


# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
def init_db():
    conn = sqlite3.connect('quiz.db')
    cursor = conn.cursor()

    # –¢–∞–±–ª–∏—Ü–∞ —Ç–µ—Å—Ç–æ–≤
    cursor.execute('''
    CREATE TABLE IF NOT EXISTS tests (
        id INTEGER PRIMARY KEY,
        name TEXT NOT NULL
    )''')

    # –¢–∞–±–ª–∏—Ü–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –≤–æ–ø—Ä–æ—Å–æ–≤ –≤ —Ç–µ—Å—Ç–∞—Ö
    cursor.execute('''
    CREATE TABLE IF NOT EXISTS categories (
        id INTEGER PRIMARY KEY,
        name TEXT NOT NULL
    )''')

    # –¢–∞–±–ª–∏—Ü–∞ –≤–æ–ø—Ä–æ—Å–æ–≤
    cursor.execute('''
    CREATE TABLE IF NOT EXISTS questions (
        id INTEGER PRIMARY KEY,
        category_id INTEGER,
        test_id INTEGER,
        question TEXT NOT NULL,
        question_type TEXT NOT NULL,
        correct_answer TEXT NOT NULL,
        option1 TEXT,
        option2 TEXT,
        option3 TEXT,
        option4 TEXT,
        image_path TEXT,
        multiple_correct TEXT,  # –î–ª—è –≤–æ–ø—Ä–æ—Å–æ–≤ —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –æ—Ç–≤–µ—Ç–∞–º–∏ (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é)
        FOREIGN KEY (category_id) REFERENCES categories(id),
        FOREIGN KEY (test_id) REFERENCES tests(id)
    )''')

    # –¢–∞–±–ª–∏—Ü–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    cursor.execute('''
    CREATE TABLE IF NOT EXISTS user_stats (
        user_id INTEGER,
        test_id INTEGER,
        correct_answers INTEGER DEFAULT 0,
        total_questions INTEGER DEFAULT 0,
        best_time INTEGER,
        PRIMARY KEY (user_id, test_id)
    )''')

    # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç—ã, –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
    cursor.execute("SELECT COUNT(*) FROM tests")
    if cursor.fetchone()[0] == 0:
        cursor.execute("INSERT INTO tests (name) VALUES ('–¢–µ—Å—Ç –ø–æ –ü–î–î 1')")
        cursor.execute("INSERT INTO tests (name) VALUES ('–¢–µ—Å—Ç –ø–æ –ü–î–î 2')")
        cursor.execute("INSERT INTO tests (name) VALUES ('–¢–µ—Å—Ç –ø–æ –ü–î–î 3')")

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏, –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
    cursor.execute("SELECT COUNT(*) FROM categories")
    if cursor.fetchone()[0] == 0:
        cursor.execute("INSERT INTO categories (name) VALUES ('–û–ø–æ–∑–Ω–∞–≤–∞—Ç–µ–ª—å–Ω—ã–µ –∑–Ω–∞–∫–∏')")
        cursor.execute("INSERT INTO categories (name) VALUES ('–ù–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã')")
        cursor.execute("INSERT INTO categories (name) VALUES ('–°–∏–≥–Ω–∞–ª—ã')")

    conn.commit()
    conn.close()


init_db()

TOKEN = '8087253865:AAERJhIB87wN2fi1yyl-0Zv3ovSQ3PUgIMw'
bot = telebot.TeleBot(TOKEN)

# –°—Ç–∞—Ç—É—Å—ã –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
STATUSES = {
    1: "–ù–æ–≤–∏—á–æ–∫ üü¢ (0-30%)",
    2: "–£—á–µ–Ω–∏–∫ üîµ (30-50%)",
    3: "–ó–Ω–∞—Ç–æ–∫ üü£ (50-70%)",
    4: "–≠–∫—Å–ø–µ—Ä—Ç üü† (70-90%)",
    5: "–ú–∞—Å—Ç–µ—Ä üî¥ (90-100%)"
}


# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å —Ç–µ—Å—Ç–∞–º–∏
def tests_keyboard():
    conn = sqlite3.connect('quiz.db')
    cursor = conn.cursor()
    cursor.execute("SELECT id, name FROM tests")
    tests = cursor.fetchall()
    conn.close()

    keyboard = InlineKeyboardMarkup()
    for test_id, name in tests:
        keyboard.add(InlineKeyboardButton(name, callback_data=f"test_{test_id}"))

    return keyboard


# –°—Ç–∞—Ä—Ç–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞
@bot.message_handler(commands=['start'])
def start(message):
    bot.send_message(
        message.chat.id,
        f"–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}! –Ø –±–æ—Ç-–≤–∏–∫—Ç–æ—Ä–∏–Ω–∞ –ø–æ –ü–î–î. –í—ã–±–µ—Ä–∏ —Ç–µ—Å—Ç:",
        reply_markup=tests_keyboard()
    )


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–µ—Å—Ç–∞
@bot.callback_query_handler(func=lambda call: call.data.startswith('test_'))
def test_selected(call):
    test_id = int(call.data.split('_')[1])

    bot.answer_callback_query(call.id)
    bot.edit_message_text(
        chat_id=call.message.chat.id,
        message_id=call.message.message_id,
        text=f"–í—ã –≤—ã–±—Ä–∞–ª–∏ —Ç–µ—Å—Ç. –ù–∞—á–∏–Ω–∞–µ–º –≤–∏–∫—Ç–æ—Ä–∏–Ω—É!"
    )

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_data = {
        'test_id': test_id,
        'correct': 0,
        'total': 0,
        'start_time': time.time(),
        'current_question': None,
        'asked_questions': set()  # –î–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —É–∂–µ –∑–∞–¥–∞–Ω–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤
    }

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –ø–∞–º—è—Ç–∏
    bot.current_user_data = user_data

    ask_question(call.message)


# –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å
def ask_question(message):
    user_data = getattr(bot, 'current_user_data', None)
    if not user_data:
        bot.send_message(message.chat.id, "–û—à–∏–±–∫–∞. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ /start")
        return

    conn = sqlite3.connect('quiz.db')
    cursor = conn.cursor()

    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –≤–æ–ø—Ä–æ—Å—ã –¥–ª—è —Ç–µ—Å—Ç–∞, –∫–æ—Ç–æ—Ä—ã–µ –µ—â–µ –Ω–µ –∑–∞–¥–∞–≤–∞–ª–∏—Å—å
    cursor.execute('''
    SELECT id, question, question_type, correct_answer, option1, option2, option3, option4, image_path, multiple_correct 
    FROM questions 
    WHERE test_id = ? AND id NOT IN ({})
    ORDER BY RANDOM() 
    LIMIT 1
    '''.format(','.join(['?'] * len(user_data['asked_questions'])) if user_data['asked_questions'] else '''
    SELECT id, question, question_type, correct_answer, option1, option2, option3, option4, image_path, multiple_correct 
    FROM questions 
    WHERE test_id = ?
    ORDER BY RANDOM() 
    LIMIT 1
    ''',
     [user_data['test_id']] + list(user_data['asked_questions']) if user_data['asked_questions']
     else [user_data['test_id']]))

    question_data = cursor.fetchone()
    conn.close()

    if not question_data:
        bot.send_message(message.chat.id, "–í —ç—Ç–æ–º —Ç–µ—Å—Ç–µ –ø–æ–∫–∞ –Ω–µ—Ç –≤–æ–ø—Ä–æ—Å–æ–≤ –∏–ª–∏ –≤—Å–µ –≤–æ–ø—Ä–æ—Å—ã —É–∂–µ –∑–∞–¥–∞–Ω—ã.")
    return

    question_id, question_text, q_type, correct, *options, image_path, multiple_correct = question_data

    # –î–æ–±–∞–≤–ª—è–µ–º –≤–æ–ø—Ä–æ—Å –≤ —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞–Ω–Ω—ã—Ö
    user_data['asked_questions'].add(question_id)

    # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤–æ–ø—Ä–æ—Å–∞
    user_data['current_question'] = {
        'id': question_id,
        'correct': correct,
        'multiple_correct': multiple_correct.split(',') if multiple_correct else None,
        'start_time': time.time(),
        'type': q_type
    }

    # –î–ª—è –≤–æ–ø—Ä–æ—Å–æ–≤ —Å —á–∏—Å–ª–æ–≤—ã–º –æ—Ç–≤–µ—Ç–æ–º
    if q_type == 'number_input':
        bot.send_message(
            message.chat.id,
            f"–í–æ–ø—Ä–æ—Å {user_data['total'] + 1}/50:\n{question_text}\n\n–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ:"
        )
        user_data['total'] += 1
        return

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –¥—Ä—É–≥–∏—Ö —Ç–∏–ø–æ–≤ –≤–æ–ø—Ä–æ—Å–æ–≤
    keyboard = InlineKeyboardMarkup()

    if q_type == 'true_false':
        keyboard.add(
            InlineKeyboardButton("–í–µ—Ä–Ω–æ", callback_data="answer_–í–µ—Ä–Ω–æ"),
            InlineKeyboardButton("–ù–µ–≤–µ—Ä–Ω–æ", callback_data="answer_–ù–µ–≤–µ—Ä–Ω–æ")
        )
    elif q_type == 'two_options':
        keyboard.add(
            InlineKeyboardButton(options[0], callback_data=f"answer_{options[0]}"),
            InlineKeyboardButton(options[1], callback_data=f"answer_{options[1]}")
        )
    elif q_type == 'four_options':
        shuffled = random.sample(options[:4], 4)
        for option in shuffled:
            keyboard.add(InlineKeyboardButton(option, callback_data=f"answer_{option}"))
    elif q_type == 'multiple_choice':
        # –î–ª—è –≤–æ–ø—Ä–æ—Å–æ–≤ —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –æ—Ç–≤–µ—Ç–∞–º–∏
        correct_answers = multiple_correct.split(',')
        options_list = options[:4]
        # –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã
        for option in options_list:
            keyboard.add(InlineKeyboardButton(option, callback_data=f"manswer_{option}"))
        # –ö–Ω–æ–ø–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤—ã–±–æ—Ä–∞
        keyboard.add(InlineKeyboardButton("‚úÖ –ì–æ—Ç–æ–≤–æ", callback_data="manswer_done"))

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ (–µ—Å–ª–∏ –µ—Å—Ç—å) –∏ –≤–æ–ø—Ä–æ—Å
    if image_path:
        try:
            with open(image_path, 'rb') as photo:
                bot.send_photo(
                    message.chat.id,
                    photo,
                    caption=f"–í–æ–ø—Ä–æ—Å {user_data['total'] + 1}/50:\n{question_text}",
                    reply_markup=keyboard
                )
        except FileNotFoundError:
            bot.send_message(
                message.chat.id,
                f"–í–æ–ø—Ä–æ—Å {user_data['total'] + 1}/50:\n{question_text}",
                reply_markup=keyboard
            )
    else:
        bot.send_message(
            message.chat.id,
            f"–í–æ–ø—Ä–æ—Å {user_data['total'] + 1}/50:\n{question_text}",
            reply_markup=keyboard
        )

    user_data['total'] += 1


# –û–±—Ä–∞–±–æ—Ç–∫–∞ —á–∏—Å–ª–æ–≤–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
@bot.message_handler(func=lambda message: getattr(bot, 'current_user_data', None) and
                                          getattr(bot.current_user_data['current_question'], 'type',
                                                  None) == 'number_input')
def handle_number_answer(message):
    user_data = getattr(bot, 'current_user_data', None)
    if not user_data or not user_data.get('current_question'):
        return

    user_answer = message.text.strip()
    correct_answer = user_data['current_question']['correct']
    is_correct = user_answer == correct_answer

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    if is_correct:
        user_data['correct'] += 1
        feedback = "‚úÖ –í–µ—Ä–Ω–æ!"
    else:
        feedback = f"‚ùå –ù–µ–≤–µ—Ä–Ω–æ! –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {correct_answer}"

    bot.send_message(message.chat.id, feedback)
    time.sleep(1)  # –ü–∞—É–∑–∞ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –≤–æ–ø—Ä–æ—Å–æ–º

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–≤–µ—Ä—à–µ–Ω –ª–∏ —Ç–µ—Å—Ç
    if user_data['total'] >= 50:
        finish_quiz(message)
    else:
        ask_question(message)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—ã—á–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤
@bot.callback_query_handler(func=lambda call: call.data.startswith('answer_'))
def handle_answer(call):
    user_data = getattr(bot, 'current_user_data', None)
    if not user_data or not user_data.get('current_question'):
        bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ /start")
        return

    user_answer = call.data.split('_')[1]
    correct_answer = user_data['current_question']['correct']
    is_correct = user_answer == correct_answer

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    if is_correct:
        user_data['correct'] += 1
        feedback = "‚úÖ –í–µ—Ä–Ω–æ!"
    else:
        feedback = f"‚ùå –ù–µ–≤–µ—Ä–Ω–æ! –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {correct_answer}"

    bot.answer_callback_query(call.id, feedback)
    time.sleep(1)  # –ü–∞—É–∑–∞ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –≤–æ–ø—Ä–æ—Å–æ–º

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–≤–µ—Ä—à–µ–Ω –ª–∏ —Ç–µ—Å—Ç
    if user_data['total'] >= 50:
        finish_quiz(call.message)
    else:
        ask_question(call.message)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–æ–≤ —Å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º –≤—ã–±–æ—Ä–æ–º
@bot.callback_query_handler(func=lambda call: call.data.startswith('manswer_'))
def handle_multiple_answer(call):
    user_data = getattr(bot, 'current_user_data', None)
    if not user_data or not user_data.get('current_question'):
        bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ /start")
        return

    action = call.data.split('_')[1]

    if action == 'done':
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã
        selected_answers = getattr(user_data['current_question'], 'selected_answers', [])
        correct_answers = user_data['current_question']['multiple_correct']

        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
        selected_sorted = sorted(selected_answers)
        correct_sorted = sorted(correct_answers)

        is_correct = selected_sorted == correct_sorted

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        if is_correct:
            user_data['correct'] += 1
            feedback = "‚úÖ –í–µ—Ä–Ω–æ!"
        else:
            feedback = f"‚ùå –ù–µ–≤–µ—Ä–Ω–æ! –ü—Ä–∞–≤–∏–ª—å–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã: {', '.join(correct_answers)}"

        bot.answer_callback_query(call.id, feedback)
        time.sleep(1)  # –ü–∞—É–∑–∞ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –≤–æ–ø—Ä–æ—Å–æ–º

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–≤–µ—Ä—à–µ–Ω –ª–∏ —Ç–µ—Å—Ç
        if user_data['total'] >= 50:
            finish_quiz(call.message)
        else:
            ask_question(call.message)
    else:
        # –î–æ–±–∞–≤–ª—è–µ–º/—É–¥–∞–ª—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç
        selected_answer = '_'.join(call.data.split('_')[1:])
        if not hasattr(user_data['current_question'], 'selected_answers'):
            user_data['current_question']['selected_answers'] = []

        if selected_answer in user_data['current_question']['selected_answers']:
            user_data['current_question']['selected_answers'].remove(selected_answer)
            bot.answer_callback_query(call.id, f"–£–±—Ä–∞–Ω–æ: {selected_answer}")
        else:
            user_data['current_question']['selected_answers'].append(selected_answer)
            bot.answer_callback_query(call.id, f"–í—ã–±—Ä–∞–Ω–æ: {selected_answer}")


# –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã
def finish_quiz(message):
    user_data = getattr(bot, 'current_user_data', None)
    if not user_data:
        bot.send_message(message.chat.id, "–û—à–∏–±–∫–∞. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ /start")
        return

    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    total_time = time.time() - user_data['start_time']
    minutes = int(total_time // 60)
    seconds = int(total_time % 60)

    correct = user_data['correct']
    total = user_data['total']
    percentage = (correct / total) * 100

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
    if percentage < 30:
        status = STATUSES[1]
    elif percentage < 50:
        status = STATUSES[2]
    elif percentage < 70:
        status = STATUSES[3]
    elif percentage < 90:
        status = STATUSES[4]
    else:
        status = STATUSES[5]

    # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–µ—Å—Ç–∞
    conn = sqlite3.connect('quiz.db')
    cursor = conn.cursor()
    cursor.execute("SELECT name FROM tests WHERE id = ?", (user_data['test_id'],))
    test_name = cursor.fetchone()[0]
    conn.close()

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    save_user_stats(message.from_user.id, user_data)

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
    result_text = (
        f"üèÅ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω!\n\n"
        f"üìö –¢–µ—Å—Ç: {test_name}\n"
        f"‚è± –í—Ä–µ–º—è –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è: {minutes} –º–∏–Ω {seconds} —Å–µ–∫\n"
        f"‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: {correct} –∏–∑ {total}\n"
        f"üìä –ü—Ä–æ—Ü–µ–Ω—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö: {percentage:.1f}%\n"
        f"üèÜ –í–∞—à —Å—Ç–∞—Ç—É—Å: {status}\n\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–µ—Å—Ç:"
    )

    bot.send_message(
        message.chat.id,
        result_text,
        reply_markup=tests_keyboard()
    )

    # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    delattr(bot, 'current_user_data')


# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def save_user_stats(user_id, user_data):
    conn = sqlite3.connect('quiz.db')
    cursor = conn.cursor()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∑–∞–ø–∏—Å—å
    cursor.execute('''
    SELECT correct_answers, total_questions, best_time 
    FROM user_stats 
    WHERE user_id = ? AND test_id = ?
    ''', (user_id, user_data['test_id']))

    existing = cursor.fetchone()

    if existing:
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∑–∞–ø–∏—Å—å
        new_correct = existing[0] + user_data['correct']
        new_total = existing[1] + user_data['total']
        best_time = min(existing[2] or float('inf'), time.time() - user_data['start_time'])

        cursor.execute('''
        UPDATE user_stats 
        SET correct_answers = ?, total_questions = ?, best_time = ?
        WHERE user_id = ? AND test_id = ?
        ''', (new_correct, new_total, best_time, user_id, user_data['test_id']))
    else:
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å
        total_time = time.time() - user_data['start_time']
        cursor.execute('''
        INSERT INTO user_stats (user_id, test_id, correct_answers, total_questions, best_time)
        VALUES (?, ?, ?, ?, ?)
        ''', (user_id, user_data['test_id'], user_data['correct'], user_data['total'], total_time))

    conn.commit()
    conn.close()


# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤–æ–ø—Ä–æ—Å–æ–≤
@bot.message_handler(commands=['addq'])
def add_question(message):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    # if message.from_user.id != ADMIN_ID:  # ADMIN_ID –Ω—É–∂–Ω–æ –∑–∞–¥–∞—Ç—å
    #     bot.send_message(message.chat.id, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤–æ–ø—Ä–æ—Å–æ–≤.")
    #     return

    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –Ω–æ–≤–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
    msg = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤–æ–ø—Ä–æ—Å–∞ –≤ —Å–ª–µ–¥—É—é—â–µ–º —Ñ–æ—Ä–º–∞—Ç–µ:\n\n"
                                            "test_id|category_id|question_type|question|correct_answer|option1|option2|option3|option4|image_path(–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)|multiple_correct(–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)\n\n"
                                            "–¢–∏–ø—ã –≤–æ–ø—Ä–æ—Å–æ–≤: true_false, two_options, four_options, number_input, multiple_choice")

    bot.register_next_step_handler(msg, process_question_data)


def process_question_data(message):
    try:
        data = message.text.split('|')
        test_id = int(data[0])
        category_id = int(data[1])
        question_type = data[2]
        question = data[3]
        correct_answer = data[4]

        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –ø–æ–ª—è
        option1 = data[5] if len(data) > 5 else None
        option2 = data[6] if len(data) > 6 else None
        option3 = data[7] if len(data) > 7 else None
        option4 = data[8] if len(data) > 8 else None
        image_path = data[9] if len(data) > 9 else None
        multiple_correct = data[10] if len(data) > 10 else None

        # –î–æ–±–∞–≤–ª—è–µ–º –≤–æ–ø—Ä–æ—Å –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        conn = sqlite3.connect('quiz.db')
        cursor = conn.cursor()

        cursor.execute('''
        INSERT INTO questions 
        (test_id, category_id, question, question_type, correct_answer, option1, option2, option3, option4, image_path, multiple_correct)
        VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
        ''', (
        test_id, category_id, question, question_type, correct_answer, option1, option2, option3, option4, image_path,
        multiple_correct))

        conn.commit()
        conn.close()

        bot.send_message(message.chat.id, "–í–æ–ø—Ä–æ—Å —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!")
    except Exception as e:
        bot.send_message(message.chat.id, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≤–æ–ø—Ä–æ—Å–∞: {str(e)}")


# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == '__main__':
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    bot.infinity_polling()