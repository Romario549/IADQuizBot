import telebot
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton
import sqlite3
import random
import time


TOKEN = '8087253865:AAERJhIB87wN2fi1yyl-0Zv3ovSQ3PUgIMw'
bot = telebot.TeleBot(TOKEN)

STATUSES = {
    1: "–ù–æ–≤–∏—á–æ–∫ üü¢ (0-30%)",
    2: "–£—á–µ–Ω–∏–∫ üîµ (30-50%)",
    3: "–ó–Ω–∞—Ç–æ–∫ üî∏ (50-70%)",
    4: "–≠–∫—Å–ø–µ—Ä—Ç üî† (70-90%)",
    5: "–ú–∞—Å—Ç–µ—Ä üî¥ (90-100%)"
}

def tests_keyboard():
    conn = sqlite3.connect('quiz.db')
    cursor = conn.cursor()
    cursor.execute("SELECT id, name FROM tests")
    tests = cursor.fetchall()
    conn.close()

    keyboard = InlineKeyboardMarkup()
    for test_id, name in tests:
        keyboard.add(InlineKeyboardButton(name, callback_data=f"test_{test_id}"))
    return keyboard

@bot.message_handler(commands=['start'])
def start(message):
    bot.send_message(
        message.chat.id,
        f"–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}! –Ø –±–æ—Ç-–≤–∏–∫—Ç–æ—Ä–∏–Ω–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–Ω–∞–Ω–∏–π –∫–∞–ø–∏—Ç–∞–Ω–æ–≤, —Å—Ç–∞—Ä—à–∏—Ö –ø–æ–º–æ—â–Ω–∏–∫–æ–≤ –∫–∞–ø–∏—Ç–∞–Ω–∞, –ø–æ–º–æ—â–Ω–∏–∫–æ–≤ –∫–∞–ø–∏—Ç–∞–Ω–∞. –í—ã–±–µ—Ä–∏ —Ç–µ—Å—Ç:",
        reply_markup=tests_keyboard()
    )

@bot.callback_query_handler(func=lambda call: call.data.startswith('test_'))
def test_selected(call):
    test_id = int(call.data.split('_')[1])
    bot.answer_callback_query(call.id)
    bot.edit_message_text(
        chat_id=call.message.chat.id,
        message_id=call.message.message_id,
        text=f"–í—ã –≤—ã–±—Ä–∞–ª–∏ —Ç–µ—Å—Ç. –ù–∞—á–∏–Ω–∞–µ–º –≤–∏–∫—Ç–æ—Ä–∏–Ω—É!"
    )

    bot.current_user_data = {
        'test_id': test_id,
        'correct': 0,
        'total': 0,
        'start_time': time.time(),
        'current_question': None,
        'asked_questions': set()
    }
    ask_question(call.message)

def ask_question(message):
    user_data = getattr(bot, 'current_user_data', None)
    if not user_data:
        bot.send_message(message.chat.id, "–û—à–∏–±–∫–∞. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ /start")
        return

    conn = sqlite3.connect('quiz.db')
    cursor = conn.cursor()

    try:
        if user_data['asked_questions']:
            cursor.execute(f'''
            SELECT id, question, question_type, correct_answer, option1, option2, option3, option4, option5, option6, image_path, multiple_correct 
            FROM questions 
            WHERE test_id = ? AND id NOT IN ({','.join(['?'] * len(user_data['asked_questions']))})
            ORDER BY RANDOM() 
            LIMIT 1
            ''', [user_data['test_id']] + list(user_data['asked_questions']))
        else:
            cursor.execute(''' 
            SELECT id, question, question_type, correct_answer, option1, option2, option3, option4, option5, option6, image_path, multiple_correct 
            FROM questions 
            WHERE test_id = ? 
            ORDER BY RANDOM() 
            LIMIT 1
            ''', [user_data['test_id']])

        question_data = cursor.fetchone()

        if not question_data:
            # –ö–æ–≥–¥–∞ –≤–æ–ø—Ä–æ—Å–æ–≤ –±–æ–ª—å—à–µ –Ω–µ—Ç, –≤—ã–≤–æ–¥–∏–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            finish_quiz(message)
            return

        (question_id, question_text, q_type, correct_answer,
         option1, option2, option3, option4, option5, option6,
         image_path, multiple_correct) = question_data

        options = [option1, option2, option3, option4, option5, option6]

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏
        if not question_text or not correct_answer:
            user_data['correct'] += 1
            user_data['asked_questions'].add(question_id)
            ask_question(message)
            return

        user_data['asked_questions'].add(question_id)

        user_data['current_question'] = {
            'id': question_id,
            'correct': correct_answer,
            'multiple_correct': multiple_correct.split(',') if multiple_correct else None,
            'start_time': time.time(),
            'type': q_type,
            'selected_answers': []
        }

        keyboard = InlineKeyboardMarkup()
        options = [opt for opt in options if opt is not None]

        if q_type == 'number_input':
            bot.send_message(
                message.chat.id,
                f"–í–æ–ø—Ä–æ—Å {len(user_data['asked_questions'])}/50:\n{question_text}\n\n–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ:"
            )
            return

        elif q_type == 'true_false':
            keyboard.add(
                InlineKeyboardButton("–í–µ—Ä–Ω–æ", callback_data="answer_–í–µ—Ä–Ω–æ"),
                InlineKeyboardButton("–ù–µ–≤–µ—Ä–Ω–æ", callback_data="answer_–ù–µ–≤–µ—Ä–Ω–æ")
            )

        elif q_type in ['two_options', 'four_options', 'five_options', 'six_options']:
            required_options = {
                'two_options': 2,
                'four_options': 4,
                'five_options': 5,
                'six_options': 6
            }[q_type]

            if len(options) >= required_options:
                shuffled = random.sample(options[:required_options], required_options)
                for option in shuffled:
                    keyboard.add(InlineKeyboardButton(option, callback_data=f"answer_{option}"))
            else:
                for option in options:
                    keyboard.add(InlineKeyboardButton(option, callback_data=f"answer_{option}"))

        elif q_type == 'multiple_choice':
            for option in options:
                keyboard.add(InlineKeyboardButton(option, callback_data=f"manswer_{option}"))
            keyboard.add(InlineKeyboardButton("‚úÖ –ì–æ—Ç–æ–≤–æ", callback_data="manswer_done"))

        if image_path:
            try:
                with open(image_path, 'rb') as photo:
                    bot.send_photo(
                        message.chat.id,
                        photo,
                        caption=f"–í–æ–ø—Ä–æ—Å {len(user_data['asked_questions'])}/50:\n{question_text}",
                        reply_markup=keyboard
                    )
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
                bot.send_message(
                    message.chat.id,
                    f"–í–æ–ø—Ä–æ—Å {len(user_data['asked_questions'])}/50:\n{question_text}",
                    reply_markup=keyboard
                )
        else:
            bot.send_message(
                message.chat.id,
                f"–í–æ–ø—Ä–æ—Å {len(user_data['asked_questions'])}/50:\n{question_text}",
                reply_markup=keyboard
            )

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–¥–∞–Ω–∏–∏ –≤–æ–ø—Ä–æ—Å–∞: {e}")
        user_data['correct'] += 1
        ask_question(message)
    finally:
        conn.close()


@bot.message_handler(func=lambda message: getattr(bot, 'current_user_data', None) and
                                          bot.current_user_data.get('current_question', {}).get(
                                              'type') == 'number_input')
def handle_number_answer(message):
    user_data = getattr(bot, 'current_user_data', None)
    if not user_data or not user_data.get('current_question'):
        return

    try:
        user_answer = message.text.strip()
        correct_answer = user_data['current_question']['correct']

        # –ü—Ä–æ–±—É–µ–º –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å –≤ —á–∏—Å–ª–∞ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
        try:
            user_num = float(user_answer)
            correct_num = float(correct_answer)
            is_correct = abs(user_num - correct_num) < 0.001  # –£—á–µ—Ç –ø–æ–≥—Ä–µ—à–Ω–æ—Å—Ç–∏
        except ValueError:
            # –ï—Å–ª–∏ –Ω–µ —á–∏—Å–ª–∞, —Å—Ä–∞–≤–Ω–∏–≤–∞–µ–º –∫–∞–∫ —Å—Ç—Ä–æ–∫–∏
            is_correct = user_answer.lower() == correct_answer.lower()

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        if is_correct:
            user_data['correct'] += 1
            feedback = "‚úÖ –í–µ—Ä–Ω–æ!"
        else:
            feedback = f"‚ùå –ù–µ–≤–µ—Ä–Ω–æ! –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {correct_answer}"

        bot.send_message(message.chat.id, feedback)
        time.sleep(1)  # –ü–∞—É–∑–∞ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –≤–æ–ø—Ä–æ—Å–æ–º

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–≤–µ—Ä—à–µ–Ω –ª–∏ —Ç–µ—Å—Ç
        if len(user_data['asked_questions']) >= 50:
            finish_quiz(message)
        else:
            ask_question(message)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —á–∏—Å–ª–æ–≤–æ–≥–æ –æ—Ç–≤–µ—Ç–∞: {e}")
        bot.send_message(message.chat.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—ã—á–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤
@bot.callback_query_handler(func=lambda call: call.data.startswith('answer_'))
def handle_answer(call):
    user_data = getattr(bot, 'current_user_data', None)
    if not user_data or not user_data.get('current_question'):
        bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ /start")
        return

    try:
        user_answer = call.data.split('_')[1]
        correct_answer = user_data['current_question']['correct']
        is_correct = user_answer.lower() == correct_answer.lower()

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        if is_correct:
            user_data['correct'] += 1
            feedback = "‚úÖ –í–µ—Ä–Ω–æ!"
        else:
            feedback = f"‚ùå –ù–µ–≤–µ—Ä–Ω–æ! –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {correct_answer}"

        bot.answer_callback_query(call.id, feedback)
        time.sleep(1)  # –ü–∞—É–∑–∞ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –≤–æ–ø—Ä–æ—Å–æ–º

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–≤–µ—Ä—à–µ–Ω –ª–∏ —Ç–µ—Å—Ç
        if len(user_data['asked_questions']) >= 50:
            finish_quiz(call.message)
        else:
            ask_question(call.message)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–≤–µ—Ç–∞: {e}")
        bot.answer_callback_query(call.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–æ–≤ —Å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º –≤—ã–±–æ—Ä–æ–º
@bot.callback_query_handler(func=lambda call: call.data.startswith('manswer_'))
def handle_multiple_answer(call):
    user_data = getattr(bot, 'current_user_data', None)
    if not user_data or not user_data.get('current_question'):
        bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ /start")
        return

    try:
        action = call.data.split('_')[1]

        if action == 'done':
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã
            selected_answers = user_data['current_question'].get('selected_answers', [])
            correct_answers = user_data['current_question'].get('multiple_correct', [])

            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
            selected_sorted = sorted([s.lower() for s in selected_answers])
            correct_sorted = sorted([c.lower() for c in correct_answers])

            is_correct = selected_sorted == correct_sorted

            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            if is_correct:
                user_data['correct'] += 1
                feedback = "‚úÖ –í–µ—Ä–Ω–æ!"
            else:
                feedback = f"‚ùå –ù–µ–≤–µ—Ä–Ω–æ! –ü—Ä–∞–≤–∏–ª—å–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã: {', '.join(correct_answers)}"

            bot.answer_callback_query(call.id, feedback)
            time.sleep(1)  # –ü–∞—É–∑–∞ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –≤–æ–ø—Ä–æ—Å–æ–º

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–≤–µ—Ä—à–µ–Ω –ª–∏ —Ç–µ—Å—Ç
            if len(user_data['asked_questions']) >= 50:
                finish_quiz(call.message)
            else:
                ask_question(call.message)
        else:
            # –î–æ–±–∞–≤–ª—è–µ–º/—É–¥–∞–ª—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç
            selected_answer = '_'.join(call.data.split('_')[1:])
            selected_answers = user_data['current_question'].get('selected_answers', [])

            if selected_answer in selected_answers:
                selected_answers.remove(selected_answer)
                bot.answer_callback_query(call.id, f"–£–±—Ä–∞–Ω–æ: {selected_answer}")
            else:
                selected_answers.append(selected_answer)
                bot.answer_callback_query(call.id, f"–í—ã–±—Ä–∞–Ω–æ: {selected_answer}")

            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤
            user_data['current_question']['selected_answers'] = selected_answers
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞: {e}")
        bot.answer_callback_query(call.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")


# –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã
def finish_quiz(message):
    user_data = getattr(bot, 'current_user_data', None)
    if not user_data:
        bot.send_message(message.chat.id, "–û—à–∏–±–∫–∞. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ /start")
        return

    try:
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        total_time = time.time() - user_data['start_time']
        minutes = int(total_time // 60)
        seconds = int(total_time % 60)

        correct = user_data['correct']
        total = len(user_data['asked_questions'])
        percentage = (correct / total) * 100 if total > 0 else 0

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
        if percentage < 30:
            status = STATUSES[1]
        elif percentage < 50:
            status = STATUSES[2]
        elif percentage < 70:
            status = STATUSES[3]
        elif percentage < 90:
            status = STATUSES[4]
        else:
            status = STATUSES[5]

        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–µ—Å—Ç–∞
        conn = sqlite3.connect('quiz.db')
        cursor = conn.cursor()
        cursor.execute("SELECT name FROM tests WHERE id = ?", (user_data['test_id'],))
        test_name = cursor.fetchone()[0]
        conn.close()

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        save_user_stats(message.from_user.id, user_data)

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
        result_text = (
            f"üèÅ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω!\n\n"
            f"üìö –¢–µ—Å—Ç: {test_name}\n"
            f"‚è± –í—Ä–µ–º—è –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è: {minutes} –º–∏–Ω {seconds} —Å–µ–∫\n"
            f"‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: {correct} –∏–∑ {total}\n"
            f"üìä –ü—Ä–æ—Ü–µ–Ω—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö: {percentage:.1f}%\n"
            f"üèÜ –í–∞—à —Å—Ç–∞—Ç—É—Å: {status}\n\n"
            f"–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–µ—Å—Ç:"
        )

        bot.send_message(
            message.chat.id,
            result_text,
            reply_markup=tests_keyboard()
        )

        # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if hasattr(bot, 'current_user_data'):
            delattr(bot, 'current_user_data')
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ç–µ—Å—Ç–∞: {e}")
        bot.send_message(message.chat.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ç–µ—Å—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")


# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def save_user_stats(user_id, user_data):
    try:
        conn = sqlite3.connect('quiz.db')
        cursor = conn.cursor()

        total_time = time.time() - user_data['start_time']
        correct = user_data['correct']
        total = len(user_data['asked_questions'])

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∑–∞–ø–∏—Å—å
        cursor.execute('''
        SELECT correct_answers, total_questions, best_time 
        FROM user_stats 
        WHERE user_id = ? AND test_id = ?
        ''', (user_id, user_data['test_id']))

        existing = cursor.fetchone()

        if existing:
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∑–∞–ø–∏—Å—å
            new_correct = existing[0] + correct
            new_total = existing[1] + total
            best_time = min(existing[2] or float('inf'), total_time)

            cursor.execute('''
            UPDATE user_stats 
            SET correct_answers = ?, total_questions = ?, best_time = ?
            WHERE user_id = ? AND test_id = ?
            ''', (new_correct, new_total, best_time, user_id, user_data['test_id']))
        else:
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å
            cursor.execute('''
            INSERT INTO user_stats (user_id, test_id, correct_answers, total_questions, best_time)
            VALUES (?, ?, ?, ?, ?)
            ''', (user_id, user_data['test_id'], correct, total, total_time))

        conn.commit()
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
    finally:
        conn.close()


# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤–æ–ø—Ä–æ—Å–æ–≤
@bot.message_handler(commands=['addq'])
def add_question(message):
    msg = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤–æ–ø—Ä–æ—Å–∞ –≤ —Å–ª–µ–¥—É—é—â–µ–º —Ñ–æ—Ä–º–∞—Ç–µ:\n\n"
                                            "test_id|category_id|question_type|question|correct_answer|option1|option2|option3|option4|image_path(–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)|multiple_correct(–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)\n\n"
                                            "–¢–∏–ø—ã –≤–æ–ø—Ä–æ—Å–æ–≤: true_false, two_options, four_options, number_input, multiple_choice")

    bot.register_next_step_handler(msg, process_question_data)


def process_question_data(message):
    try:
        data = message.text.split('|')
        test_id = int(data[0])
        category_id = int(data[1])
        question_type = data[2]
        question = data[3]
        correct_answer = data[4]

        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –ø–æ–ª—è
        option1 = data[5] if len(data) > 5 else None
        option2 = data[6] if len(data) > 6 else None
        option3 = data[7] if len(data) > 7 else None
        option4 = data[8] if len(data) > 8 else None
        image_path = data[9] if len(data) > 9 else None
        multiple_correct = data[10] if len(data) > 10 else None

        # –î–æ–±–∞–≤–ª—è–µ–º –≤–æ–ø—Ä–æ—Å –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        conn = sqlite3.connect('quiz.db')
        cursor = conn.cursor()

        cursor.execute('''
        INSERT INTO questions 
        (test_id, category_id, question, question_type, correct_answer, option1, option2, option3, option4, image_path, multiple_correct)
        VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
        ''', (
        test_id, category_id, question, question_type, correct_answer, option1, option2, option3, option4, image_path,
        multiple_correct))

        conn.commit()
        conn.close()

        bot.send_message(message.chat.id, "–í–æ–ø—Ä–æ—Å —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!")
    except Exception as e:
        bot.send_message(message.chat.id, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≤–æ–ø—Ä–æ—Å–∞: {str(e)}")


# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == '__main__':
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    bot.remove_webhook()  # Delete any existing webhook first
    time.sleep(1)  # Small delay
    bot.infinity_polling()
