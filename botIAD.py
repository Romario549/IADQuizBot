import telebot
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton
import sqlite3
import random
import time



# conn = sqlite3.connect('quiz.db')
# cursor = conn.cursor()
# cursor.execute("INSERT INTO categories (name) VALUES ('–ò—Å—Ç–æ—Ä–∏—è')")
# cursor.execute("INSERT INTO categories (name) VALUES ('–ù–∞—É–∫–∞')")
# conn.commit()
# conn.close()


# # –í–æ–ø—Ä–æ—Å —Ç–∏–ø–∞ "–í–µ—Ä–Ω–æ/–ù–µ–≤–µ—Ä–Ω–æ"
# cursor.execute('''
# INSERT INTO questions (category_id, question, question_type, correct_answer, option1, option2)
# VALUES (1, '–Ø—Ä–æ—Å–ª–∞–≤ –ú—É–¥—Ä—ã–π –æ—Å–Ω–æ–≤–∞–ª –ú–æ—Å–∫–≤—É', 'true_false', '–ù–µ–≤–µ—Ä–Ω–æ', '–í–µ—Ä–Ω–æ', '–ù–µ–≤–µ—Ä–Ω–æ')
# ''')
#
# # –í–æ–ø—Ä–æ—Å —Å 2 –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏
# cursor.execute('''
# INSERT INTO questions (category_id, question, question_type, correct_answer, option1, option2)
# VALUES (1, '–ö—Ç–æ –Ω–∞–ø–∏—Å–∞–ª "–í–æ–π–Ω—É –∏ –º–∏—Ä"?', 'two_options', '–õ–µ–≤ –¢–æ–ª—Å—Ç–æ–π', '–õ–µ–≤ –¢–æ–ª—Å—Ç–æ–π', '–§–µ–¥–æ—Ä –î–æ—Å—Ç–æ–µ–≤—Å–∫–∏–π')
# ''')
#
# # –í–æ–ø—Ä–æ—Å —Å 4 –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏
# cursor.execute('''
# INSERT INTO questions (category_id, question, question_type, correct_answer, option1, option2, option3, option4)
# VALUES (2, '–°–∫–æ–ª—å–∫–æ –ø–ª–∞–Ω–µ—Ç –≤ –°–æ–ª–Ω–µ—á–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ?', 'four_options', '8', '7', '8', '9', '10')
# ''')
# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–∞ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º
# cursor.execute('''
# INSERT INTO questions (category_id, question, question_type, correct_answer, option1, option2, option3, option4, image_path)
# VALUES (1, '–ö–∞–∫–æ–π —ç—Ç–æ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω—ã–π —Å—Ç–∏–ª—å?', 'four_options', '–ë–∞—Ä–æ–∫–∫–æ', '–ì–æ—Ç–∏–∫–∞', '–ë–∞—Ä–æ–∫–∫–æ', '–†–µ–Ω–µ—Å—Å–∞–Ω—Å', '–ö–ª–∞—Å—Å–∏—Ü–∏–∑–º', 'images/baroque.jpg')
# ''')

TOKEN = '8087253865:AAERJhIB87wN2fi1yyl-0Zv3ovSQ3PUgIMw'
bot = telebot.TeleBot(TOKEN)

# –°—Ç–∞—Ç—É—Å—ã –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
STATUSES = {
    1: "–ù–æ–≤–∏—á–æ–∫ üü¢ (0-30%)",
    2: "–£—á–µ–Ω–∏–∫ üîµ (30-50%)",
    3: "–ó–Ω–∞—Ç–æ–∫ üü£ (50-70%)",
    4: "–≠–∫—Å–ø–µ—Ä—Ç üü† (70-90%)",
    5: "–ú–∞—Å—Ç–µ—Ä üî¥ (90-100%)"
}


# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
def init_db():
    conn = sqlite3.connect('quiz.db')
    cursor = conn.cursor()

    cursor.execute('''
    CREATE TABLE IF NOT EXISTS categories (
        id INTEGER PRIMARY KEY,
        name TEXT NOT NULL
    )''')

    cursor.execute('''
    CREATE TABLE IF NOT EXISTS questions (
        id INTEGER PRIMARY KEY,
        category_id INTEGER,
        question TEXT NOT NULL,
        question_type TEXT NOT NULL,
        correct_answer TEXT NOT NULL,
        option1 TEXT,
        option2 TEXT,
        option3 TEXT,
        option4 TEXT,
        image_path TEXT,  
        FOREIGN KEY (category_id) REFERENCES categories(id)
    )''')

    cursor.execute('''
    CREATE TABLE IF NOT EXISTS user_stats (
        user_id INTEGER,
        category_id INTEGER,
        correct_answers INTEGER DEFAULT 0,
        total_questions INTEGER DEFAULT 0,
        best_time INTEGER,
        PRIMARY KEY (user_id, category_id)
    )''')

    conn.commit()
    conn.close()


init_db()


# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏
def categories_keyboard():
    conn = sqlite3.connect('quiz.db')
    cursor = conn.cursor()
    cursor.execute("SELECT id, name FROM categories")
    categories = cursor.fetchall()
    conn.close()

    keyboard = InlineKeyboardMarkup()
    for category_id, name in categories:
        keyboard.add(InlineKeyboardButton(name, callback_data=f"category_{category_id}"))

    return keyboard


# –°—Ç–∞—Ä—Ç–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞
@bot.message_handler(commands=['start'])
def start(message):
    bot.send_message(
        message.chat.id,
        f"–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}! –Ø –±–æ—Ç-–≤–∏–∫—Ç–æ—Ä–∏–Ω–∞. –í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:",
        reply_markup=categories_keyboard()
    )


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
@bot.callback_query_handler(func=lambda call: call.data.startswith('category_'))
def category_selected(call):
    category_id = int(call.data.split('_')[1])

    bot.answer_callback_query(call.id)
    bot.edit_message_text(
        chat_id=call.message.chat.id,
        message_id=call.message.message_id,
        text=f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é. –ù–∞—á–∏–Ω–∞–µ–º –≤–∏–∫—Ç–æ—Ä–∏–Ω—É!"
    )

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_data = {
        'category_id': category_id,
        'correct': 0,
        'total': 0,
        'start_time': time.time(),
        'current_question': None
    }

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –ø–∞–º—è—Ç–∏ (–≤ —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ –ª—É—á—à–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö)
    bot.current_user_data = user_data

    ask_question(call.message)


# –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å
def ask_question(message):
    user_data = getattr(bot, 'current_user_data', None)
    if not user_data:
        bot.send_message(message.chat.id, "–û—à–∏–±–∫–∞. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ /start")
        return

    conn = sqlite3.connect('quiz.db')
    cursor = conn.cursor()
    cursor.execute('''
    SELECT id, question, question_type, correct_answer, option1, option2, option3, option4, image_path 
    FROM questions 
    WHERE category_id = ? 
    ORDER BY RANDOM() 
    LIMIT 1
    ''', (user_data['category_id'],))

    question_data = cursor.fetchone()
    conn.close()

    if not question_data:
        bot.send_message(message.chat.id, "–í —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ–∫–∞ –Ω–µ—Ç –≤–æ–ø—Ä–æ—Å–æ–≤.")
        return

    question_id, question_text, q_type, correct, *options, image_path = question_data

    # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤–æ–ø—Ä–æ—Å–∞
    user_data['current_question'] = {
        'id': question_id,
        'correct': correct,
        'start_time': time.time()
    }

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    keyboard = InlineKeyboardMarkup()

    if q_type == 'true_false':
        keyboard.add(
            InlineKeyboardButton("–í–µ—Ä–Ω–æ", callback_data="answer_–í–µ—Ä–Ω–æ"),
            InlineKeyboardButton("–ù–µ–≤–µ—Ä–Ω–æ", callback_data="answer_–ù–µ–≤–µ—Ä–Ω–æ")
        )
    elif q_type == 'two_options':
        keyboard.add(
            InlineKeyboardButton(options[0], callback_data=f"answer_{options[0]}"),
            InlineKeyboardButton(options[1], callback_data=f"answer_{options[1]}")
        )
    elif q_type == 'four_options':
        shuffled = random.sample(options[:4], 4)  # –ë–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 4 —ç–ª–µ–º–µ–Ω—Ç–∞
        for option in shuffled:
            keyboard.add(InlineKeyboardButton(option, callback_data=f"answer_{option}"))

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ (–µ—Å–ª–∏ –µ—Å—Ç—å) –∏ –≤–æ–ø—Ä–æ—Å
    if image_path:
        try:
            with open(image_path, 'rb') as photo:
                bot.send_photo(
                    message.chat.id,
                    photo,
                    caption=f"–í–æ–ø—Ä–æ—Å {user_data['total'] + 1}/10:\n{question_text}",
                    reply_markup=keyboard
                )
        except FileNotFoundError:
            bot.send_message(
                message.chat.id,
                f"–í–æ–ø—Ä–æ—Å {user_data['total'] + 1}/10:\n{question_text}",
                reply_markup=keyboard
            )
    else:
        bot.send_message(
            message.chat.id,
            f"–í–æ–ø—Ä–æ—Å {user_data['total'] + 1}/10:\n{question_text}",
            reply_markup=keyboard
        )

    user_data['total'] += 1

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞
@bot.callback_query_handler(func=lambda call: call.data.startswith('answer_'))
def handle_answer(call):
    user_data = getattr(bot, 'current_user_data', None)
    if not user_data or not user_data.get('current_question'):
        bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ /start")
        return

    user_answer = call.data.split('_')[1]
    correct_answer = user_data['current_question']['correct']
    is_correct = user_answer == correct_answer

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    if is_correct:
        user_data['correct'] += 1
        feedback = "‚úÖ –í–µ—Ä–Ω–æ!"
    else:
        feedback = f"‚ùå –ù–µ–≤–µ—Ä–Ω–æ! –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {correct_answer}"

    # –í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤–æ–ø—Ä–æ—Å
    question_time = time.time() - user_data['current_question']['start_time']

    bot.answer_callback_query(call.id, feedback)
    time.sleep(1)  # –ü–∞—É–∑–∞ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –≤–æ–ø—Ä–æ—Å–æ–º

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–≤–µ—Ä—à–µ–Ω –ª–∏ —Ç–µ—Å—Ç
    if user_data['total'] >= 10:
        finish_quiz(call.message)
    else:
        ask_question(call.message)


# –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã
def finish_quiz(message):
    user_data = getattr(bot, 'current_user_data', None)
    if not user_data:
        bot.send_message(message.chat.id, "–û—à–∏–±–∫–∞. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ /start")
        return

    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    total_time = time.time() - user_data['start_time']
    minutes = int(total_time // 60)
    seconds = int(total_time % 60)

    correct = user_data['correct']
    total = user_data['total']
    percentage = (correct / total) * 100

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
    if percentage < 30:
        status = STATUSES[1]
    elif percentage < 50:
        status = STATUSES[2]
    elif percentage < 70:
        status = STATUSES[3]
    elif percentage < 90:
        status = STATUSES[4]
    else:
        status = STATUSES[5]

    # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    conn = sqlite3.connect('quiz.db')
    cursor = conn.cursor()
    cursor.execute("SELECT name FROM categories WHERE id = ?", (user_data['category_id'],))
    category_name = cursor.fetchone()[0]
    conn.close()

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    save_user_stats(message.from_user.id, user_data)

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
    result_text = (
        f"üèÅ –í–∏–∫—Ç–æ—Ä–∏–Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n"
        f"üìö –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category_name}\n"
        f"‚è± –í—Ä–µ–º—è –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è: {minutes} –º–∏–Ω {seconds} —Å–µ–∫\n"
        f"‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: {correct} –∏–∑ {total}\n"
        f"üìä –ü—Ä–æ—Ü–µ–Ω—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö: {percentage:.1f}%\n"
        f"üèÜ –í–∞—à —Å—Ç–∞—Ç—É—Å: {status}\n\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é:"
    )

    bot.send_message(
        message.chat.id,
        result_text,
        reply_markup=categories_keyboard()
    )

    # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    delattr(bot, 'current_user_data')


# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def save_user_stats(user_id, user_data):
    conn = sqlite3.connect('quiz.db')
    cursor = conn.cursor()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∑–∞–ø–∏—Å—å
    cursor.execute('''
    SELECT correct_answers, total_questions, best_time 
    FROM user_stats 
    WHERE user_id = ? AND category_id = ?
    ''', (user_id, user_data['category_id']))

    existing = cursor.fetchone()

    if existing:
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∑–∞–ø–∏—Å—å
        new_correct = existing[0] + user_data['correct']
        new_total = existing[1] + user_data['total']
        best_time = min(existing[2] or float('inf'), time.time() - user_data['start_time'])

        cursor.execute('''
        UPDATE user_stats 
        SET correct_answers = ?, total_questions = ?, best_time = ?
        WHERE user_id = ? AND category_id = ?
        ''', (new_correct, new_total, best_time, user_id, user_data['category_id']))
    else:
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å
        total_time = time.time() - user_data['start_time']
        cursor.execute('''
        INSERT INTO user_stats (user_id, category_id, correct_answers, total_questions, best_time)
        VALUES (?, ?, ?, ?, ?)
        ''', (user_id, user_data['category_id'], user_data['correct'], user_data['total'], total_time))

    conn.commit()
    conn.close()


# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == '__main__':
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    bot.infinity_polling()